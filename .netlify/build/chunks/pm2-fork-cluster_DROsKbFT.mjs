import { p as createVNode, F as Fragment, _ as __astro_tag_component__ } from './astro/server_Cn2uIOZN.mjs';
import 'clsx';

const frontmatter = {
  "date": "2024-01-21T00:00:00.000Z",
  "title": "How to Choose Between Fork and Cluster Mode in PM2",
  "description": "Learn what fork and cluster mode are, how they differ, and when to use them for your projects with PM2, a popular process manager for applications.\"",
  "image": "../../assets/images/24/01/pm2-fork-vs-cluster.jpeg",
  "categories": ["vps"],
  "authors": ["Dragos"],
  "tags": ["pm2"],
  "canonical": "https://www.bitdoze.com/pm2-fork-cluster/"
};
function getHeadings() {
  return [{
    "depth": 2,
    "slug": "what-is-fork-mode",
    "text": "What is Fork Mode?"
  }, {
    "depth": 2,
    "slug": "what-is-cluster-mode",
    "text": "What is Cluster Mode?"
  }, {
    "depth": 2,
    "slug": "how-to-choose-between-fork-and-cluster-mode",
    "text": "How to Choose Between Fork and Cluster Mode?"
  }, {
    "depth": 2,
    "slug": "what-are-the-best-practices-for-using-cluster-mode-in-pm2",
    "text": "What are the best practices for using cluster mode in PM2?"
  }];
}
function _createMdxContent(props) {
  const _components = {
    a: "a",
    code: "code",
    h2: "h2",
    li: "li",
    p: "p",
    pre: "pre",
    span: "span",
    strong: "strong",
    ul: "ul",
    ...props.components
  };
  return createVNode(Fragment, {
    children: [createVNode(_components.p, {
      children: [createVNode(_components.a, {
        href: "https://pm2.keymetrics.io/",
        children: "PM2"
      }), " is a popular process manager for Node.js applications that allows you to run, monitor, and scale your applications with ease. PM2 is designed to make your Node.js development and deployment more efficient and reliable, by providing features such as:"]
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: [createVNode(_components.strong, {
          children: "Process management:"
        }), " You can start, stop, restart, delete, or list your Node.js processes with simple commands or a web interface."]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.strong, {
          children: "Load balancing:"
        }), " You can distribute the load of your applications across multiple CPU cores, by using cluster mode or process scaling."]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.strong, {
          children: "Monitoring:"
        }), " You can monitor the performance and status of your applications, such as CPU usage, memory usage, requests per second, errors, logs, and more."]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.strong, {
          children: "Logging:"
        }), " You can manage the logs of your applications, such as rotating, streaming, or flushing them."]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.strong, {
          children: "Watch and reload:"
        }), " You can enable watch mode to automatically reload your applications when the source code changes."]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.strong, {
          children: "Deployment:"
        }), " You can deploy your applications to remote servers with a single command, by using the PM2 deploy feature."]
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: ["Check ", createVNode(_components.a, {
        href: "https://www.bitdoze.com/pm2-manage-apps/",
        children: "How to Manage Applications with PM2"
      }), " for a complete tutorial."]
    }), "\n", createVNode(_components.h2, {
      id: "what-is-fork-mode",
      children: "What is Fork Mode?"
    }), "\n", createVNode(_components.p, {
      children: "Fork mode is the default mode of PM2, where it spawns a single process for each application. This mode is suitable for applications that use different versions of Node.js, or applications that are not networked, such as scripts, workers, or cron jobs."
    }), "\n", createVNode(_components.p, {
      children: "Fork mode also supports some advanced features of PM2, such as:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "Cron restarts: You can specify a cron pattern to restart your application at a specific time or interval."
      }), "\n", createVNode(_components.li, {
        children: "Source map support: You can enable source map support to get the original source code location of errors in your application."
      }), "\n", createVNode(_components.li, {
        children: "Custom log formats: You can customize the format of the logs generated by your application, such as adding timestamps, colors, or prefixes."
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "To use fork mode, you can simply run your application with PM2 without any additional options, or specify the exec_mode as fork in your configuration file. For example:"
    }), "\n", createVNode(_components.pre, {
      class: "astro-code one-dark-pro",
      style: {
        backgroundColor: "#282c34",
        color: "#abb2bf",
        overflowX: "auto",
        whiteSpace: "pre-wrap",
        wordWrap: "break-word"
      },
      tabindex: "0",
      "data-language": "sh",
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#7F848E",
              fontStyle: "italic"
            },
            children: "# Run app.js in fork mode"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "pm2"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " start"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " app.js"
          })]
        }), "\n", createVNode(_components.span, {
          class: "line"
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#7F848E",
              fontStyle: "italic"
            },
            children: "# Or via a configuration file"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "module.exports"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " ="
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " {"
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "  apps"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: " ["
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: "    {"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      script"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " \"app.js\","
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      exec_mode"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " \"fork\""
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: "    }"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: "  ]"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: "}"
          })
        })]
      })
    }), "\n", createVNode(_components.p, {
      children: "The advantages of fork mode are:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "It allows you to run applications with different versions of Node.js, by using the node_args option to specify the path to the Node.js binary."
      }), "\n", createVNode(_components.li, {
        children: "It allows you to run applications that are not networked, such as scripts, workers, or cron jobs, by using the type option to specify the type of the application."
      }), "\n", createVNode(_components.li, {
        children: ["It offers more flexibility and control over your applications, by allowing you to use custom ", createVNode(_components.a, {
          href: "https://www.bitdoze.com/pm2-env-vars/",
          children: "environment variables"
        }), ", arguments, log formats, etc."]
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "The disadvantages of fork mode are:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "It does not take advantage of the multi-core capabilities of your CPU, by creating only one process per application."
      }), "\n", createVNode(_components.li, {
        children: "It does not support some features of PM2 that are available in cluster mode, such as graceful reload, zero-downtime restart, and automatic port sharing."
      }), "\n", createVNode(_components.li, {
        children: "It requires more configuration and management, by requiring you to specify the options for each application individually."
      }), "\n"]
    }), "\n", createVNode(_components.h2, {
      id: "what-is-cluster-mode",
      children: "What is Cluster Mode?"
    }), "\n", createVNode(_components.p, {
      children: "Cluster mode is a more advanced mode of PM2, where it creates multiple processes for each application, and distributes the incoming requests among them. This mode takes advantage of the multi-core capabilities of your CPU, and improves the performance and reliability of your applications."
    }), "\n", createVNode(_components.p, {
      children: "Cluster mode is ideal for networked applications, such as HTTP, TCP, or UDP servers, that can handle concurrent requests from multiple clients. Cluster mode also supports some features of PM2 that are not available in fork mode, such as:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "Graceful reload: You can reload your application without losing any requests, by waiting for the existing connections to close before restarting the processes."
      }), "\n", createVNode(_components.li, {
        children: "Zero-downtime restart: You can restart your application without any downtime, by spawning new processes before killing the old ones."
      }), "\n", createVNode(_components.li, {
        children: "Automatic port sharing: You can run multiple processes on the same port, by using the cluster module of Node.js to enable load balancing and port sharing."
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "To use cluster mode, you need to pass the -i option to PM2, and specify the number of processes you want to create. You can also use max to create as many processes as the number of CPU cores, or -1 to create one less than the number of CPU cores. Alternatively, you can specify the exec_mode as cluster in your configuration file. For example:"
    }), "\n", createVNode(_components.pre, {
      class: "astro-code one-dark-pro",
      style: {
        backgroundColor: "#282c34",
        color: "#abb2bf",
        overflowX: "auto",
        whiteSpace: "pre-wrap",
        wordWrap: "break-word"
      },
      tabindex: "0",
      "data-language": "sh",
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#7F848E",
              fontStyle: "italic"
            },
            children: "# Run app.js in cluster mode with 4 processes"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "pm2"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " start"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " app.js"
          }), createVNode(_components.span, {
            style: {
              color: "#D19A66"
            },
            children: " -i"
          }), createVNode(_components.span, {
            style: {
              color: "#D19A66"
            },
            children: " 4"
          })]
        }), "\n", createVNode(_components.span, {
          class: "line"
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#7F848E",
              fontStyle: "italic"
            },
            children: "# Or use max to auto-detect the number of CPU cores"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "pm2"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " start"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " app.js"
          }), createVNode(_components.span, {
            style: {
              color: "#D19A66"
            },
            children: " -i"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " max"
          })]
        }), "\n", createVNode(_components.span, {
          class: "line"
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#7F848E",
              fontStyle: "italic"
            },
            children: "# Or via a configuration file"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "module.exports"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " ="
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " {"
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "  apps"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: " ["
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: "    {"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      script"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " \"app.js\","
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      instances"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " \"max\","
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      exec_mode"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " \"cluster\""
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: "    }"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: "  ]"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: "}"
          })
        })]
      })
    }), "\n", createVNode(_components.p, {
      children: "The advantages of cluster mode are:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "It improves the performance and reliability of your networked applications, by creating multiple processes that can handle the load and recover from failures."
      }), "\n", createVNode(_components.li, {
        children: "It supports some features of PM2 that are not available in fork mode, such as graceful reload, zero-downtime restart, and automatic port sharing."
      }), "\n", createVNode(_components.li, {
        children: "It offers better scalability and fault tolerance, by allowing you to add or remove processes dynamically, or use the PM2 reload feature to update your code without stopping your application."
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "The disadvantages of cluster mode are:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "It consumes more memory and CPU resources, by creating multiple processes for each application."
      }), "\n", createVNode(_components.li, {
        children: "It requires the same version of Node.js and networked applications, by using the cluster module of Node.js that reuses the same Node.js instance for each process."
      }), "\n", createVNode(_components.li, {
        children: "It does not support some advanced features of PM2 that are available in fork mode, such as cron restarts, source map support, and custom log formats."
      }), "\n"]
    }), "\n", createVNode(_components.h2, {
      id: "how-to-choose-between-fork-and-cluster-mode",
      children: "How to Choose Between Fork and Cluster Mode?"
    }), "\n", createVNode(_components.p, {
      children: "The choice between fork and cluster mode depends on several factors, such as:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "The type of your application: If your application is networked and can handle concurrent requests, cluster mode is a better option. If your application is not networked or uses different versions of Node.js, fork mode is more suitable."
      }), "\n", createVNode(_components.li, {
        children: "The features you need: If you need features such as cron restarts, source map support, or custom log formats, fork mode is the only option. If you need features such as graceful reload, zero-downtime restart, or automatic port sharing, cluster mode is the preferred option."
      }), "\n", createVNode(_components.li, {
        children: "The trade-offs you are willing to make: Cluster mode offers better scalability and fault tolerance, but it also consumes more memory and CPU resources. Fork mode offers more flexibility and control, but it also requires more configuration and management."
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "To help you decide which mode to use, you can ask yourself the following questions:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "Do I need to run applications with different versions of Node.js, or applications that are not networked?"
      }), "\n", createVNode(_components.li, {
        children: "Do I need features such as cron restarts, source map support, or custom log formats?"
      }), "\n", createVNode(_components.li, {
        children: "Do I have enough memory and CPU resources to run multiple processes for each application?"
      }), "\n", createVNode(_components.li, {
        children: "Do I need features such as graceful reload, zero-downtime restart, or automatic port sharing?"
      }), "\n", createVNode(_components.li, {
        children: "Do I want to improve the performance and reliability of my networked applications?"
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "If you answered yes to the first two questions, fork mode is the best option for you. If you answered yes to the last three questions, cluster mode is the best option for you. If you answered yes to some of the questions from both groups, you need to weigh the pros and cons of each mode, and choose the one that best suits your needs and preferences."
    }), "\n", createVNode(_components.h2, {
      id: "what-are-the-best-practices-for-using-cluster-mode-in-pm2",
      children: "What are the best practices for using cluster mode in PM2?"
    }), "\n", createVNode(_components.p, {
      children: "Cluster mode is a powerful feature of PM2 that can boost the performance and reliability of your networked applications. However, to use cluster mode effectively, you need to follow some best practices, such as:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: ["Use the same version of Node.js for all your applications in cluster mode, by using the ", createVNode(_components.code, {
          children: "node_args option"
        }), " to specify the path to the Node.js binary. This will ensure that the cluster module of Node.js works properly and consistently across all your processes."]
      }), "\n", createVNode(_components.li, {
        children: ["Use the ", createVNode(_components.code, {
          children: "max_memory_restart"
        }), " option to specify the maximum memory limit for each process in cluster mode. This will prevent memory leaks and optimize the memory usage of your applications."]
      }), "\n", createVNode(_components.li, {
        children: ["Use the ", createVNode(_components.code, {
          children: "wait_ready"
        }), " option to enable the graceful reload feature in cluster mode. This will allow your processes to send a ready signal to PM2 when they are ready to receive requests, and wait for the existing connections to close before restarting. This will ensure that no requests are lost or interrupted during the reload process."]
      }), "\n", createVNode(_components.li, {
        children: ["Use the ", createVNode(_components.code, {
          children: "listen_timeout"
        }), " and kill_timeout options to adjust the timeout values for the graceful reload feature in cluster mode. The listen_timeout option specifies the maximum time to wait for the ready signal from the processes, and the kill_timeout option specifies the maximum time to wait for the connections to close before killing the processes. These options will help you avoid errors or delays during the reload process."]
      }), "\n", createVNode(_components.li, {
        children: ["Use the ", createVNode(_components.code, {
          children: "pm2 reload"
        }), " command to update your code without stopping your application in cluster mode. This command will spawn new processes with the updated code, and replace the old processes gradually. This will ensure that your application is always running and serving requests, even during the update process."]
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "Here is an example of a configuration file that uses cluster mode with some of the best practices mentioned above:"
    }), "\n", createVNode(_components.pre, {
      class: "astro-code one-dark-pro",
      style: {
        backgroundColor: "#282c34",
        color: "#abb2bf",
        overflowX: "auto",
        whiteSpace: "pre-wrap",
        wordWrap: "break-word"
      },
      tabindex: "0",
      "data-language": "sh",
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "module.exports"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " ="
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " {"
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "  apps"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: " ["
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: "    {"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      script"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " \"app.js\","
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      instances"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " \"max\","
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      exec_mode"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " \"cluster\","
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      node_args"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " \"/usr/local/bin/node\","
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      max_memory_restart"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " \"300M\","
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      wait_ready"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#D19A66"
            },
            children: " true"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: ","
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      listen_timeout"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " 5000,"
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#61AFEF"
            },
            children: "      kill_timeout"
          }), createVNode(_components.span, {
            style: {
              color: "#98C379"
            },
            children: " :"
          }), createVNode(_components.span, {
            style: {
              color: "#D19A66"
            },
            children: " 5000"
          })]
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: "    }"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: "  ]"
          })
        }), "\n", createVNode(_components.span, {
          class: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#ABB2BF"
            },
            children: "}"
          })
        }), "\n", createVNode(_components.span, {
          class: "line"
        })]
      })
    }), "\n", createVNode(_components.p, {
      children: "##Conclusion"
    }), "\n", createVNode(_components.p, {
      children: "PM2 is a powerful tool for running, monitoring, and scaling your applications. It offers two modes of operation: fork and cluster, that have different advantages and disadvantages. You should choose the mode that best suits your application type, features, and trade-offs. You can also switch between the modes easily by changing the options or the configuration file of PM2. We hope this article helped you understand the difference between fork and cluster mode in PM2, and how to choose the best one for your projects."
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}

const url = "src/content/posts/pm2-fork-cluster.mdx/";
const file = "C:/Users/brandfordko/react/bitdoze-astro-bkw/src/content/posts/pm2-fork-cluster.mdx";
const Content = (props = {}) => MDXContent({
  ...props,
  components: { Fragment: Fragment, ...props.components, },
});
Content[Symbol.for('mdx-component')] = true;
Content[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter.layout);
Content.moduleId = "C:/Users/brandfordko/react/bitdoze-astro-bkw/src/content/posts/pm2-fork-cluster.mdx";
__astro_tag_component__(Content, 'astro:jsx');

export { Content, Content as default, file, frontmatter, getHeadings, url };
