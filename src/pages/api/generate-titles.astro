---
import OpenAI from "openai";

export const prerender = false;

// Type-safe environment variable access
const LITELLM_API_KEY = import.meta.env.LITELLM_API_KEY;
const LITELLM_BASE_URL = import.meta.env.LITELLM_BASE_URL;

if (!LITELLM_API_KEY || !LITELLM_BASE_URL) {
  throw new Error("Missing required environment variables");
}

const openai = new OpenAI({
  apiKey: LITELLM_API_KEY,
  baseURL: LITELLM_BASE_URL,
});

if (Astro.request.method === "POST") {
  try {
    const body = await Astro.request.json();
    const { topic, systemPrompt, userPromptTemplate } = body;

    if (!topic || !systemPrompt || !userPromptTemplate) {
      return new Response(
        JSON.stringify({ error: "Missing required parameters" }),
        {
          status: 400,
          headers: { "Content-Type": "application/json" },
        },
      );
    }

    const userPrompt = userPromptTemplate.replace("{topic}", topic);

    const completion = await openai.chat.completions.create({
      model: "main-llm-bitdoze",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt },
      ],
      max_tokens: 1550,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error("No content generated");
    }

    const titles = content.split("\n").filter((title) => title.trim() !== "");

    return new Response(JSON.stringify({ titles }), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("Error:", error);

    let errorMessage = "An unexpected error occurred";
    let statusCode = 500;

    if (error instanceof Error) {
      errorMessage = error.message;
      if (error.message.includes("Missing required parameters")) {
        statusCode = 400;
      }
    }

    return new Response(JSON.stringify({ error: errorMessage }), {
      status: statusCode,
      headers: { "Content-Type": "application/json" },
    });
  }
} else {
  return new Response(JSON.stringify({ error: "Method not allowed" }), {
    status: 405,
    headers: { "Content-Type": "application/json" },
  });
}
---
