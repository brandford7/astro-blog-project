---
import { Image } from "astro:assets";
import Share from "@components/Share.astro";
import SimilarPosts from "@components/SimilarPosts.astro";
import { getSinglePage } from "@lib/contentParser.astro";
import dateFormat from "@lib/utils/dateFormat";
import { humanize, markdownify, slugify } from "@lib/utils/textConverter";
import { Icon } from "astro-icon/components";
import { type CollectionEntry } from "astro:content";
import PostHeadings from "./components/table-of-contents/PostHeadings.astro";
import RightSimilarPosts from "@components/RightSimilarPosts.astro";

const allAuthors = await getSinglePage("authors");
const allPosts = await getSinglePage("posts");

interface Props {
  post: CollectionEntry<"posts">;
}
const { post } = Astro.props;

// Function to shuffle an array
const shuffleArray = (array: any[]) => {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
};

// Function to get similar posts based on tags with improved randomization
const getSimilarPosts = (
  currentPost: CollectionEntry<"posts">,
  allPosts: CollectionEntry<"posts">[],
  limit: number,
) => {
  const currentTags = currentPost.data.tags || [];

  // Filter posts that share at least one tag
  const postsWithSimilarTags = allPosts.filter(
    (p) =>
      p.slug !== currentPost.slug && // Exclude current post
      p.data.tags?.some((tag) => currentTags.includes(tag)),
  );

  // Shuffle the filtered posts
  const shuffledPosts = shuffleArray([...postsWithSimilarTags]);

  // If we don't have enough similar posts, add random posts to fill
  if (shuffledPosts.length < limit) {
    const remainingPosts = allPosts.filter(
      (p) => p.slug !== currentPost.slug && !shuffledPosts.includes(p),
    );
    shuffledPosts.push(...shuffleArray(remainingPosts));
  }

  return shuffledPosts.slice(0, limit);
};

const similarPosts = getSimilarPosts(
  post,
  allPosts as CollectionEntry<"posts">[],
  3,
);
const rightsimilarPosts = getSimilarPosts(
  post,
  allPosts as CollectionEntry<"posts">[],
  4,
);

const { Content, headings } = await post.render();

const {
  title,
  description,
  authors,
  categories,
  image,
  date,
  tags,
  canonical,
} = post.data;
---

<section class="section">
  <div class="container">
    <article class="row justify-center">
      <div class="md:col-10 text-center">
        <h1
          set:html={markdownify(title)}
          class="h2"
          transition:name={`title-${post.slug}`}
        />
        <ul class="mt-4 flex flex-wrap items-center justify-center text-text">
          <li class="mx-3">
            {
              allAuthors
                .filter((author) =>
                  authors
                    .map((author: string) => slugify(author))
                    .includes(slugify(author.data.title)),
                )
                .map((author, i) => (
                  <a
                    href={`/authors/${slugify(author.slug)}` + "/"}
                    class="flex items-center hover:text-primary font-medium"
                  >
                    {author.data.image && (
                      <Image
                        src={
                          typeof author.data.image === "string"
                            ? author.data.image
                            : author.data.image.src
                        }
                        alt={author.data.title}
                        height={50}
                        width={50}
                        class="mr-2 h-6 w-6 rounded-full"
                      />
                    )}
                    <span>{author.data.title}</span>
                  </a>
                ))
            }
          </li>
          <li class="mx-3 flex items-center flex-wrap font-medium">
            <Icon name="mdi:calendar-edit" class="mr-1 h-5 w-5 text-gray-600" />
            <>{date && dateFormat(date)}</>
          </li>
          <li class="mx-3 flex items-center flex-wrap">
            <Icon
              name="mdi:folder"
              class="mr-1 h-[18px] w-[18px] text-gray-600"
            />
            <>
              <ul>
                {
                  categories.map((category: string, i: number) => (
                    <li class="inline-block">
                      <a
                        href={`/categories/${slugify(category)}` + "/"}
                        class="mr-2 hover:text-primary font-medium"
                      >
                        {humanize(category)}
                        {i !== post.data.categories.length - 1 && ","}
                      </a>
                    </li>
                  ))
                }
              </ul>
            </>
          </li>
        </ul>
      </div>

      <div class="col-12 mt-8 mb-2">
        {
          image && (
            <Image
              src={image}
              height={500}
              width={1000}
              alt={title}
              class="rounded-lg"
              transition:name={`image-${post.slug}`}
            />
          )
        }
      </div>

      <div class="md:col-10">
        <div class="content mb-16 text-left">
          <aside class="not-prose p-5 rounded-sm">
            <p class="font-bold">Table of contents:</p>
            <PostHeadings headings={headings} />
          </aside>
          <Content />
        </div>
        <div class="flex flex-wrap items-center justify-between">
          <ul class="mr-4 mb-4 space-x-3">
            {
              tags.map((tag: string) => (
                <li class="inline-block">
                  <a
                    href={`/tags/${slugify(tag)}` + "/"}
                    class="block rounded-lg bg-theme-light px-4 py-2 font-semibold text-dark text-sm hover:text-primary transition duration-300"
                  >
                    #{humanize(tag)}
                  </a>
                </li>
              ))
            }
          </ul>
          <Share
            className="social-share mb-4"
            title={title}
            description={description}
            slug={post.slug}
          />
        </div>
      </div>
    </article>
  </div>
</section>
<RightSimilarPosts posts={rightsimilarPosts} limit={4} />

<!-- similar posts -->
{
  similarPosts.length > 0 && (
    <section class="section pt-0 not-prose">
      <div class="container">
        <h2 class="mb-8 text-center h3">Similar Posts</h2>
        <SimilarPosts posts={similarPosts} />
      </div>
    </section>
  )
}